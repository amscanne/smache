#!/usr/bin/env python

import os
import sys

import smache

def daemonize():
    # Do first fork.
    try: 
        pid = os.fork() 
        if pid > 0:
            sys.exit(0)
    except OSError, e: 
        sys.stderr.write("fork failed: (%d) %s\n" % (e.errno, e.strerror))
        sys.exit(1)

    # Decouple from parent environment.
    os.chdir("/") 
    os.umask(0) 
    os.setsid() 

    # Do second fork.
    try: 
        pid = os.fork() 
        if pid > 0:
            sys.exit(0)
    except OSError, e: 
        sys.stderr.write("fork failed: (%d) %s\n" % (e.errno, e.strerror))
        sys.exit(1)

    # Redirect standard file descriptors.
    si = open('/dev/null', 'r')
    so = open('/dev/null', 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())

def usage():
    sys.stderr.write("usage: %s [--log=<file>] [--daemonize] [--verbose] [--config=<config>] [--help]" % sys.argv[0])

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "l:dvc:h", ["log=", "daemonize", "verbose", "config=", "help"])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    log    = None
    config = None
    daemon = False

    # Parse all options.
    for o, a in opts:
        if o in ("-l", "--log"):
            log = a
        elif o in ("-d", "--daemonize"):
            daemon = True
        elif o in ("-v", "--verbose"):
            smache.setLogLevel(smache.getLogLevel())
        elif o in ("-c", "--config"):
            config = a
        elif o in ("-h", "--help"):
            usage()
            sys.exit()

    # Daemonize if necessary.
    if daemon:
        daemonize(log)

    # Send our logs to the appropriate place.
    if log:
        se = open(log, 'a+', 0)
        os.dup2(se.fileno(), sys.stderr.fileno())

    # Check that we have a config.
    if not(config):
        sys.stderr.write("Unable to start without a config.\n")
        sys.exit(1)

    # Run the server.
    instance = smache.Smache(config)
    instance.run()
