#!/bin/bash

#
# This a simple script to aim in testing and debugging.
# It basically zips up the build contents and prints the
# hashes of the original files and the extracted ones.
#
set -e

pythonlib=`ls -1d $PWD/utils/build/lib.*/`
export LD_LIBRARY_PATH=$PWD/lib/:$LD_LIBRARY_PATH
export PYTHONPATH=$pythonlib

#DEBUG="gdb --args python"
#DEBUG="valgrind --leak-check=full"

echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

#
# Remake things.
#
(cd utils && make)
(cd lib && make)

#
# Build the test config.
#
cat >sanity.conf <<EOF
[smache]
index = $PWD/sanity.index
compression = lzo
blockalgo = rabin
blocksize = 128
debug = 0

[berkeleydb]
filename = $PWD/sanity.db
debug    = 0
EOF

#
# Remove the old files.
#
rm -rf sanity-check
rm -f sanity.db
rm -f sanity.index

#
# Build the reference set.
#
CUR=`pwd`
cd $pythonlib && ln -fs ../scripts*/smachezip
cd $CUR

if [ "x$DEBUG" == "x" ]; then
    $pythonlib/smachezip a sanity.conf .
else
    $DEBUG $pythonlib/smachezip a sanity.conf .
fi

rm -f sanity.input
for file in `find . | grep -v sanity | sort`; do 
    if [ -f $file ]; then
        sum=`md5sum $file | cut -d' ' -f1`
        echo "`basename $file` $sum" >> sanity.input
    fi
done

#
# Extract it to the test set.
#
mkdir -p sanity-check
cd sanity-check

if [ "x$DEBUG" == "x" ]; then
    $pythonlib/smachezip x ../sanity.conf
else
    $DEBUG $pythonlib/smachezip x ../sanity.conf
fi

rm -f ../sanity.output
for file in `find . | grep -v sanity | sort`; do
    if [ -f $file ]; then
        sum=`md5sum $file | cut -d' ' -f1`
        echo "`basename $file` $sum" >> ../sanity.output
    fi
done
cd ..

diff sanity.input sanity.output && echo "Sanity check passed."
